{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{335:function(a,t,e){\"use strict\";e.r(t);var s=e(14),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"java11新特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java11新特性\"}},[a._v(\"#\")]),a._v(\" java11新特性\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"Nest-based access control（基于嵌套的访问控制）\")]),a._v(\" \"),t(\"li\",[a._v(\"Updates in the Reflection API（反射API的更新）\")]),a._v(\" \"),t(\"li\",[a._v(\"String API updates（字符串API更新）\")]),a._v(\" \"),t(\"li\",[a._v(\"Updates in reflective access of the nested class（嵌套类的反射访问更新）\")]),a._v(\" \"),t(\"li\",[a._v(\"Local variable syntax for lambda parameters（Lambda参数的局部变量语法）\")]),a._v(\" \"),t(\"li\",[a._v(\"HttpClient(Standard)（标准HttpClient）\")]),a._v(\" \"),t(\"li\",[a._v(\"Launch Single-File SourceCode Program（启动单文件源代码程序）\")])]),a._v(\" \"),t(\"h2\",{attrs:{id:\"nest-based-access-control\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#nest-based-access-control\"}},[a._v(\"#\")]),a._v(\" Nest-based access control\")]),a._v(\" \"),t(\"p\",[a._v(\"​        在Java中，嵌套类和接口可以访问其外部类的私有成员。这种访问权限被称为基于嵌套的访问控制。例如：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('class OuterClass {\\n    private String privateField = \"Private Field\";\\n\\n    class InnerClass {\\n        void accessOuterClass() {\\n            System.out.println(privateField);\\n        }\\n    }\\n}\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        OuterClass outer = new OuterClass();\\n        OuterClass.InnerClass inner = outer.new InnerClass();\\n        inner.accessOuterClass(); // 输出 \"Private Field\"\\n    }\\n}\\n')])])]),t(\"h2\",{attrs:{id:\"updates-in-the-reflection-api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#updates-in-the-reflection-api\"}},[a._v(\"#\")]),a._v(\" Updates in the Reflection API\")]),a._v(\" \"),t(\"p\",[a._v(\"​         Java 9引入了模块系统，这导致了一些反射API的更改。例如，\"),t(\"code\",[a._v(\"java.lang.reflect.Proxy\")]),a._v(\"类现在有一个名为\"),t(\"code\",[a._v(\"getProxyClass\")]),a._v(\"的新方法，用于获取代理类的\"),t(\"code\",[a._v(\"Class\")]),a._v(\"对象。此外，\"),t(\"code\",[a._v(\"java.lang.reflect.Method\")]),a._v(\"类现在有一个名为\"),t(\"code\",[a._v(\"isModule\")]),a._v(\"的方法，用于检查方法是否属于某个模块。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"string-api-updates\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-api-updates\"}},[a._v(\"#\")]),a._v(\" String API updates\")]),a._v(\" \"),t(\"p\",[a._v(\"​       Java 11引入了一些新的字符串API，如\"),t(\"code\",[a._v(\"strip()\")]),a._v(\", \"),t(\"code\",[a._v(\"isBlank()\")]),a._v(\", \"),t(\"code\",[a._v(\"repeat()\")]),a._v(\"等。例如：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('public class Main {\\n    public static void main(String[] args) {\\n        String str = \" Hello, World! \";\\n        System.out.println(str.strip()); // 输出 \"Hello, World!\"\\n        System.out.println(\"\".isBlank()); // 输出 true\\n        System.out.println(\"*\".repeat(5)); // 输出 \"*****\"\\n    }\\n}\\n')])])]),t(\"h2\",{attrs:{id:\"updates-in-reflective-access-of-the-nested-class\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#updates-in-reflective-access-of-the-nested-class\"}},[a._v(\"#\")]),a._v(\" Updates in reflective access of the nested class\")]),a._v(\" \"),t(\"p\",[a._v(\"​         Java 14引入了一个新的API，允许在运行时访问嵌套类的私有成员。这个API是\"),t(\"code\",[a._v(\"java.lang.invoke.MethodHandles.Lookup\")]),a._v(\"类的一个新方法\"),t(\"code\",[a._v(\"findAllClasses()\")]),a._v(\"。例如：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"import java.lang.invoke.MethodHandles;\\nimport java.lang.invoke.MethodHandles.Lookup;\\nimport java.util.Set;\\n\\nclass OuterClass {\\n    private static class PrivateNestedClass {\\n    }\\n}\\n\\npublic class Main {\\n    public static void main(String[] args) throws Throwable {\\n        Lookup lookup = MethodHandles.lookup();\\n        Set<Class<?>> classes = lookup.findAllClasses(OuterClass.class);\\n        for (Class<?> clazz : classes) {\\n            System.out.println(clazz.getName());\\n        }\\n    }\\n}\\n\")])])]),t(\"h2\",{attrs:{id:\"local-variable-syntax-for-lambda-parameters\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#local-variable-syntax-for-lambda-parameters\"}},[a._v(\"#\")]),a._v(\" Local variable syntax for lambda parameters\")]),a._v(\" \"),t(\"p\",[a._v(\"​     Java 10引入了一种新的语法，允许在Lambda表达式中使用局部变量。这种语法称为“局部变量语法”。例如：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\");\\nnames.forEach((name) -> System.out.println(name)); // Java 8及更早版本\\nnames.forEach(name -> System.out.println(name)); // Java 10及更高版本\\n')])])]),t(\"h2\",{attrs:{id:\"httpclient-standard\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#httpclient-standard\"}},[a._v(\"#\")]),a._v(\" HttpClient(Standard)\")]),a._v(\" \"),t(\"p\",[a._v(\"​    Java 11引入了一个新的HTTP客户端API，名为\"),t(\"code\",[a._v(\"java.net.http.HttpClient\")]),a._v(\"。这个API提供了一种更简单、更现代的方式来处理HTTP请求。例如：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('import java.net.URI;\\nimport java.net.http.HttpClient;\\nimport java.net.http.HttpRequest;\\nimport java.net.http.HttpResponse;\\n\\npublic class Main {\\n    public static void main(String[] args) throws Exception {\\n        HttpClient client = HttpClient.newHttpClient();\\n        HttpRequest request = HttpRequest.newBuilder()\\n                .uri(URI.create(\"https://www.example.com\"))\\n                .build();\\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\\n        System.out.println(response.body());\\n    }\\n}\\n')])])]),t(\"h2\",{attrs:{id:\"launch-single-file-sourcecode-program\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#launch-single-file-sourcecode-program\"}},[a._v(\"#\")]),a._v(\" Launch Single-File SourceCode Program\")]),a._v(\" \"),t(\"p\",[a._v(\"​        从Java 11开始，可以使用\"),t(\"code\",[a._v(\"java\")]),a._v(\"命令行工具直接运行单个源代码文件。例如，如果你有一个名为\"),t(\"code\",[a._v(\"HelloWorld.java\")]),a._v(\"的文件，只需在命令行中输入\"),t(\"code\",[a._v(\"java HelloWorld.java\")]),a._v(\"即可运行它。\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}