{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{345:function(t,e,n){\"use strict\";n.r(e);var a=n(14),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"java9新特性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java9新特性\"}},[t._v(\"#\")]),t._v(\" java9新特性\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"概述\")]),t._v(\"：java9对数组和集合的stream进行史诗级加强\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"arrays类:\")])]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"compare方法\")]),t._v(\"：其本质效果就是：数组相等就返回0，不相等就返回-1\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"equals方法\")]),t._v(\"：其本质效果就是：数组相等就返回true，不相等就返回flase\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"mismatch方法\")]),t._v(\"：其本质效果就是：返回数组第一个不匹配的下标\")])]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"collection类:\")])]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"List of(E e1)方法\")]),t._v(\"：返回list集合\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"<K, V> Map<K, V> of(K k1, V v1)\")]),t._v(\"：返回map集合\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"Set of(E e1, E e2, E e3)方法\")]),t._v(\"：返回set集合\")])]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"flowapi类\")]),t._v(\":\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"Publisher\")]),t._v(\"：负责发布消息，是数据源的角色。\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"Subscriber\")]),t._v(\"：负责订阅并处理消息，是消费者的角色。\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"Subscription\")]),t._v(\"：订阅控制类，用于发布者和订阅者之间的通信。\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"Processor\")]),t._v(\"：同时充当 Publisher 和 Subscriber 的角色，可以对数据进行处理后再发布。\")])]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"defaultMethod\")]),t._v(\"：接口可以设置多个default方法\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"completable\")]),t._v(\"：\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"code\",[t._v(\"thenAcceptBoth()\")]),t._v(\": 接受两个\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并在它们都完成时执行一个\"),e(\"code\",[t._v(\"BiConsumer\")]),t._v(\"操作。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"runAfterBoth()\")]),t._v(\": 接受两个\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并在它们都完成时执行一个\"),e(\"code\",[t._v(\"Runnable\")]),t._v(\"操作。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"acceptEither()\")]),t._v(\": 接受两个\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并在其中一个完成时执行一个\"),e(\"code\",[t._v(\"Consumer\")]),t._v(\"操作。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"runAfterEither()\")]),t._v(\": 接受两个\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并在其中一个完成时执行一个\"),e(\"code\",[t._v(\"Runnable\")]),t._v(\"操作。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"thenCompose()\")]),t._v(\": 接受一个\"),e(\"code\",[t._v(\"Function\")]),t._v(\"作为参数，该函数将上一个\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"的结果转换为一个新的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"allOf()\")]),t._v(\": 接受一组\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并返回一个新的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象，当所有给定的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象都完成时，该新对象将被标记为完成。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"anyOf()\")]),t._v(\": 接受一组\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象作为参数，并返回一个新的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象，当其中任何一个给定的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象完成时，该新对象将被标记为完成。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"exceptionally()\")]),t._v(\": 接受一个\"),e(\"code\",[t._v(\"Function\")]),t._v(\"作为参数，该函数将在发生异常时被调用，并返回一个新的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象。\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"handle()\")]),t._v(\": 接受一个\"),e(\"code\",[t._v(\"BiFunction\")]),t._v(\"作为参数，该函数将在\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"完成或发生异常时被调用，并返回一个新的\"),e(\"code\",[t._v(\"CompletableFuture\")]),t._v(\"对象。\")])]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"stream流:\")])]),t._v(\" \"),e(\"ol\",[e(\"li\",[e(\"strong\",[t._v(\"takeWhile方法\")]),t._v(\"：\"),e(\"code\",[t._v(\"takeWhile\")]),t._v(\"方法用于从流中获取满足指定条件的元素，直到遇到第一个不满足条件的元素为止。\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"dropWhile方法\")]),t._v(\"：\"),e(\"code\",[t._v(\"dropWhile\")]),t._v(\"方法与\"),e(\"code\",[t._v(\"takeWhile\")]),t._v(\"方法相反，它用于跳过流中满足指定条件的元素，直到遇到第一个不满足条件的元素为止。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"arrays\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arrays\"}},[t._v(\"#\")]),t._v(\" arrays\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"compare方法源码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#compare方法源码\"}},[t._v(\"#\")]),t._v(\" compare方法源码：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"public static int compare(int[] a, int[] b) {\\n        if (a == b)\\n            return 0;\\n        if (a == null || b == null)\\n            return a == null ? -1 : 1;\\n\\n        int i = ArraysSupport.mismatch(a, b,\\n                                       Math.min(a.length, b.length));\\n        if (i >= 0) {\\n            return Integer.compare(a[i], b[i]);\\n        }\\n\\n        return a.length - b.length;\\n    }\\n\")])])]),e(\"h3\",{attrs:{id:\"equals方法源码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#equals方法源码\"}},[t._v(\"#\")]),t._v(\" equals方法源码：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"public static boolean equals(int[] a, int[] a2) {\\n        if (a==a2)\\n            return true;\\n        if (a==null || a2==null)\\n            return false;\\n\\n        int length = a.length;\\n        if (a2.length != length)\\n            return false;\\n\\n        return ArraysSupport.mismatch(a, a2, length) < 0;\\n    }\\n\")])])]),e(\"h3\",{attrs:{id:\"mismatch方法源码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mismatch方法源码\"}},[t._v(\"#\")]),t._v(\" mismatch方法源码\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"  public static int mismatch(int[] a, int[] b) {\\n        int length = Math.min(a.length, b.length); // Check null array refs\\n        if (a == b)\\n            return -1;\\n\\n        int i = ArraysSupport.mismatch(a, b, length);\\n        return (i < 0 && a.length != b.length) ? length : i;\\n    }\\n\")])])]),e(\"h2\",{attrs:{id:\"collection\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#collection\"}},[t._v(\"#\")]),t._v(\" collection\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"list\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#list\"}},[t._v(\"#\")]),t._v(\" list\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//creating empty List\\n\\t\\tList<Employee> empList1=List.of();\\n\\t\\t\\n\\t\\t//creating List with one object\\n\\t\\tList<Employee> empList2=List.of(new Employee(1,\"William Smith\"));\\n\\t\\t\\n\\t\\t//creating list with multiple objects, can accept upto 10 elements\\n\\t\\tList<Employee> empList3=List.of(new Employee(1,\"zhangsan\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew Employee(2,\"lisi\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew Employee(3,\"wangwu\"));\\n')])])]),e(\"h3\",{attrs:{id:\"map\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#map\"}},[t._v(\"#\")]),t._v(\" map\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//creating empty Set\\n\\t\\tMap<Integer, Employee> empMap1=Map.of();\\n\\t\\t\\t\\t\\n\\t\\t//creating Set with one object\\n\\t\\tMap<Integer,Employee> empMap2=Map.of(1, new Employee(101,\"William Smith\"));\\n\\t\\t\\t\\t\\n\\t\\t//creating Set with multiple objects, can accept upto 10 elements\\n\\t\\tMap<Integer, Employee> empMap3=Map.of(1,new Employee(101,\"William Smith\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t2,new Employee(102,\"Rakesh Ahuja\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t3,new Employee(103,\"David Monte\"));\\n\\t\\t\\t\\t\\n\\t\\t//creating arbitrary number of elements in Map \\n\\t\\tMap<Integer,Employee> empMap4=Map.ofEntries(\\n\\t\\t\\t\\t\\t\\t\\tentry(1, new Employee(101,\"William Smith\")),\\n\\t\\t\\t\\t\\t\\t\\tentry(2, new Employee(102, \"Rakesh Ahuja\")),\\n\\t\\t\\t\\t\\t\\t\\tentry(3, new Employee(103, \"David Monte\"))\\n\\t\\t\\t\\t\\t\\t\\t);\\t\\n')])])]),e(\"h3\",{attrs:{id:\"set\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#set\"}},[t._v(\"#\")]),t._v(\" set\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//creating empty Set\\n\\t\\tSet<Employee> empSet1=Set.of();\\n\\t\\t\\n\\t\\t//creating Set with one object\\n\\t\\tSet<Employee> empSet2=Set.of(new Employee(101,\"William Smith\"));\\n\\t\\t\\n\\t\\t//creating Set with multiple objects, can accept upto 10 elements\\n\\t\\tSet<Employee> empSet3=Set.of(new Employee(101,\"William Smith\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew Employee(102,\"Rakesh Ahuja\"),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew Employee(103,\"David Monte\"));\\n')])])]),e(\"h2\",{attrs:{id:\"flowapi\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flowapi\"}},[t._v(\"#\")]),t._v(\" flowapi\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('import java.util.Arrays;\\nimport java.util.List;\\nimport java.util.concurrent.Flow;\\nimport java.util.concurrent.SubmissionPublisher;\\n\\npublic class FlowAPIExample {\\n    public static void main(String[] args) throws InterruptedException {\\n        // 创建数据源\\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\\n\\n        // 创建发布者\\n        SubmissionPublisher<Integer> publisher = new SubmissionPublisher<>();\\n\\n        // 创建订阅者\\n        Flow.Subscriber<Integer> subscriber = new Flow.Subscriber<>() {\\n            private Flow.Subscription subscription;\\n\\n            @Override\\n            public void onSubscribe(Flow.Subscription subscription) {\\n                this.subscription = subscription;\\n                subscription.request(1); // 请求一个数据项\\n            }\\n\\n            @Override\\n            public void onNext(Integer item) {\\n                System.out.println(\"接收到数据：\" + item);\\n                subscription.request(1); // 继续请求下一个数据项\\n            }\\n\\n            @Override\\n            public void onError(Throwable throwable) {\\n                System.err.println(\"发生错误：\" + throwable.getMessage());\\n            }\\n\\n            @Override\\n            public void onComplete() {\\n                System.out.println(\"数据处理完成\");\\n            }\\n        };\\n\\n        // 订阅数据流\\n        publisher.subscribe(subscriber);\\n\\n        // 发布数据流\\n        for (Integer number : numbers) {\\n            publisher.submit(number);\\n        }\\n\\n        // 关闭发布者\\n        publisher.close();\\n\\n        // 等待异步处理完成\\n        Thread.sleep(1000);\\n    }\\n}\\n\\n')])])]),e(\"h2\",{attrs:{id:\"completablefuture\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#completablefuture\"}},[t._v(\"#\")]),t._v(\" completablefuture\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('private static void completeOnTime() {\\n    // TODO Auto-generated method stub\\n    int value1 = 100;\\n    int value2 = 200;\\n\\n    CompletableFuture.supplyAsync(() -> {\\n       try {\\n          TimeUnit.SECONDS.sleep(5);\\n       } catch (InterruptedException e) {\\n          e.printStackTrace();\\n       }\\n       return value1 + value2;\\n    }).completeOnTimeout(10, 2, TimeUnit.SECONDS).\\n             thenAccept(result -> System.out.println(\"Result from completeOnTime()==> \"+result));\\n    //waits for 2 seconds to complete, else returns 10 as a value\\n    try {\\n       TimeUnit.SECONDS.sleep(10);//waiting for 10 seconds\\n    } catch (InterruptedException e) {\\n       // TODO Auto-generated catch block\\n       e.printStackTrace();\\n    }\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"stream\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stream\"}},[t._v(\"#\")]),t._v(\" stream\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"takewhile方法\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#takewhile方法\"}},[t._v(\"#\")]),t._v(\" \"),e(\"strong\",[t._v(\"takeWhile\")]),t._v(\"方法\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import java.util.stream.Stream;\\n\\npublic class TakeWhileExample {\\n    public static void main(String[] args) {\\n        Stream<Integer> numbers = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\\n\\n        numbers.takeWhile(n -> n < 5)\\n               .forEach(System.out::println); // 输出 1, 2, 3, 4\\n    }\\n}\\n\\n\")])])]),e(\"h3\",{attrs:{id:\"dropwhile方法\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dropwhile方法\"}},[t._v(\"#\")]),t._v(\" \"),e(\"strong\",[t._v(\"dropWhile方法\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import java.util.stream.Stream;\\n\\npublic class DropWhileExample {\\n    public static void main(String[] args) {\\n        Stream<Integer> numbers = Stream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\\n\\n        numbers.dropWhile(n -> n < 5)\\n               .forEach(System.out::println); // 输出 5, 6, 7, 8, 9, 10\\n    }\\n}\\n\\n\")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}