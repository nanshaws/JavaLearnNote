{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{337:function(e,t,n){\"use strict\";n.r(t);var a=n(14),i=Object(a.a)({},(function(){var e=this,t=e._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"java13新特性\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java13新特性\"}},[e._v(\"#\")]),e._v(\" java13新特性\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"Updates in java.nio.file.FileSystems\")]),e._v(\" \"),t(\"li\",[e._v(\"Updates in XML parsers\")])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"updates-in-java-nio-file-filesystems\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#updates-in-java-nio-file-filesystems\"}},[e._v(\"#\")]),e._v(\" Updates in java.nio.file.FileSystems\")]),e._v(\" \"),t(\"p\",[e._v(\"​        在Java 13中，对java.nio.file.FileSystems类进行了一些更新。这个类提供了访问文件系统的方法，例如创建、删除和修改文件或目录。在Java 13中，引入了一些新的方法和属性，以提供更好的文件系统支持。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('import java.io.IOException;\\nimport java.nio.charset.StandardCharsets;\\nimport java.nio.file.FileSystems;\\nimport java.nio.file.Files;\\nimport java.nio.file.Path;\\nimport java.util.List;\\n\\npublic class FileSystemExample {\\n    public static void main(String[] args) {\\n        // 获取默认的文件系统\\n        var fileSystem = FileSystems.getDefault();\\n\\n        // 定义要读取的文件路径\\n        var filePath = fileSystem.getPath(\"example.txt\");\\n\\n        try {\\n            // 读取文件内容\\n            List<String> lines = Files.readAllLines(filePath, StandardCharsets.UTF_8);\\n\\n            // 输出文件内容\\n            for (String line : lines) {\\n                System.out.println(line);\\n            }\\n        } catch (IOException e) {\\n            System.err.println(\"Error reading file: \" + e.getMessage());\\n        }\\n    }\\n}\\n')])])]),t(\"h2\",{attrs:{id:\"updates-in-xml-parsers\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#updates-in-xml-parsers\"}},[e._v(\"#\")]),e._v(\" Updates in XML parsers\")]),e._v(\" \"),t(\"p\",[e._v(\"​         在Java 13中，对XML解析器进行了一些更新。这些更新包括修复了一些已知的问题，并提高了解析性能。此外，还引入了一些新的特性，如支持XML命名空间和CDATA块等。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('import java.io.File;\\nimport javax.xml.parsers.DocumentBuilder;\\nimport javax.xml.parsers.DocumentBuilderFactory;\\nimport org.w3c.dom.Document;\\nimport org.w3c.dom.Element;\\nimport org.w3c.dom.Node;\\nimport org.w3c.dom.NodeList;\\n\\npublic class XMLParserExample {\\n    public static void main(String[] args) {\\n        try {\\n            // 创建文档构建工厂\\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\\n\\n            // 创建文档构建器\\n            DocumentBuilder builder = factory.newDocumentBuilder();\\n\\n            // 解析XML文件\\n            Document document = builder.parse(new File(\"example.xml\"));\\n\\n            // 获取根元素\\n            Element rootElement = document.getDocumentElement();\\n\\n            // 获取所有子节点\\n            NodeList nodeList = rootElement.getChildNodes();\\n\\n            // 遍历子节点\\n            for (int i = 0; i < nodeList.getLength(); i++) {\\n                Node node = nodeList.item(i);\\n\\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\\n                    Element element = (Element) node;\\n                    System.out.println(\"Element: \" + element.getTagName());\\n                }\\n            }\\n        } catch (Exception e) {\\n            System.err.println(\"Error parsing XML file: \" + e.getMessage());\\n        }\\n    }\\n}\\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);","extractedComments":[]}