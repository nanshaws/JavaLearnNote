{"remainingRequest":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\docs\\libgdx\\tutorial7.md?vue&type=template&id=acf1d3f2","dependencies":[{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\docs\\libgdx\\tutorial7.md","mtime":1709013092379},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxDb250ZW50U2xvdHNEaXN0cmlidXRvciA6c2xvdC1rZXk9IiRwYXJlbnQuc2xvdEtleSI+PGgyIGlkPSJfNy0xLWh0dHDor7fmsYIiPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjXzctMS1odHRw6K+35rGCIj4jPC9hPiA3LjEgSFRUUOivt+axgjwvaDI+CjxwPuWcqGxpYkdEWOS4re+8jOWPr+S7peS9v+eUqEh0dHBSZXF1ZXN057G75p2l5Y+R6YCBSFRUUOivt+axguOAguS7peS4i+aYr+S4gOS4queugOWNleeahOekuuS+i++8mjwvcD4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgY29tLm15Z2R4LmdhbWUuaHR0cDsKCmltcG9ydCBjb20uYmFkbG9naWMuZ2R4LkdkeDsKaW1wb3J0IGNvbS5iYWRsb2dpYy5nZHguTmV0OwppbXBvcnQgY29tLmJhZGxvZ2ljLmdkeC5uZXQuSHR0cFJlcXVlc3RCdWlsZGVyOwppbXBvcnQgY29tLmJhZGxvZ2ljLmdkeC5uZXQuSHR0cFN0YXR1czsKCnB1YmxpYyBjbGFzcyBIdHRwRXhhbXBsZSB7CiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc2VuZCgpIHsKICAgICAgICBIdHRwUmVxdWVzdEJ1aWxkZXIgcmVxdWVzdEJ1aWxkZXIgPSBuZXcgSHR0cFJlcXVlc3RCdWlsZGVyKCk7CiAgICAgICAgTmV0Lkh0dHBSZXF1ZXN0IGh0dHBSZXF1ZXN0ID0gcmVxdWVzdEJ1aWxkZXIubmV3UmVxdWVzdCgpLm1ldGhvZChOZXQuSHR0cE1ldGhvZHMuR0VUKS51cmwoJnF1b3Q7aHR0cHM6Ly93d3cuZ29vZ2xlLmRlJnF1b3Q7KS5jb250ZW50KCZxdW90O3E9bGliZ2R4JmFtcDtleGFtcGxlPWV4YW1wbGUmcXVvdDspLmJ1aWxkKCk7CiAgICAgICAgR2R4Lm5ldC5zZW5kSHR0cFJlcXVlc3QoaHR0cFJlcXVlc3QsIGh0dHBSZXNwb25zZUxpc3RlbmVyKTsKICAgICAgICAvL+acieWPguaVsOeahAovLyAgICAgICAgSHR0cFJlcXVlc3RCdWlsZGVyIHJlcXVlc3RCdWlsZGVyID0gbmV3IEh0dHBSZXF1ZXN0QnVpbGRlcigpOwovLyAgICAgICAgSHR0cFJlcXVlc3QgaHR0cFJlcXVlc3QgPSByZXF1ZXN0QnVpbGRlci5uZXdSZXF1ZXN0KCkubWV0aG9kKEh0dHBNZXRob2RzLkdFVCkudXJsKCZxdW90O2h0dHBzOi8vd3d3Lmdvb2dsZS5kZSZxdW90OykuY29udGVudCgmcXVvdDtxPWxpYmdkeCZhbXA7ZXhhbXBsZT1leGFtcGxlJnF1b3Q7KS5idWlsZCgpOwovLyAgICAgICAgR2R4Lm5ldC5zZW5kSHR0cFJlcXVlc3QoaHR0cFJlcXVlc3QsIGh0dHBSZXNwb25zZUxpc3RlbmVyKTsKCiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgTmV0Lkh0dHBSZXNwb25zZUxpc3RlbmVyIGh0dHBSZXNwb25zZUxpc3RlbmVyID0gbmV3IE5ldC5IdHRwUmVzcG9uc2VMaXN0ZW5lcigpIHsKICAgICAgICBAT3ZlcnJpZGUKICAgICAgICBwdWJsaWMgdm9pZCBoYW5kbGVIdHRwUmVzcG9uc2UoTmV0Lkh0dHBSZXNwb25zZSBodHRwUmVzcG9uc2UpIHsKICAgICAgICAgICAgaWYgKGh0dHBSZXNwb25zZS5nZXRTdGF0dXMoKS5nZXRTdGF0dXNDb2RlKCkgPT0gSHR0cFN0YXR1cy5TQ19PSykgewogICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCZxdW90O+ivt+axguaIkOWKn++8jOWTjeW6lOWGheWuue+8miZxdW90OyArIGh0dHBSZXNwb25zZS5nZXRSZXN1bHRBc1N0cmluZygpKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigmcXVvdDvor7fmsYLlpLHotKXvvIznirbmgIHnoIHvvJomcXVvdDsgKyBodHRwUmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0U3RhdHVzQ29kZSgpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIHZvaWQgZmFpbGVkKFRocm93YWJsZSB0aHJvd2FibGUpIHsKICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCZxdW90O+Wksei0pSZxdW90Oyk7CiAgICAgICAgfQoKICAgICAgICBAT3ZlcnJpZGUKICAgICAgICBwdWJsaWMgdm9pZCBjYW5jZWxsZWQoKSB7CiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigmcXVvdDvlj5bmtogmcXVvdDspOwogICAgICAgIH0KICAgIH07Cgp9CjwvY29kZT48L3ByZT4KPCEtLWJlZm9yZWVuZC0tPjwvZGl2PjwhLS1hZnRlcmVuZC0tPjxoMiBpZD0idGNw6YCa5L+hLeWuouaIt+erryI+PGEgY2xhc3M9ImhlYWRlci1hbmNob3IiIGhyZWY9IiN0Y3DpgJrkv6Et5a6i5oi356uvIj4jPC9hPiBUQ1DpgJrkv6HvvIzlrqLmiLfnq688L2gyPgo8IS0tYmVmb3JlYmVnaW4tLT48ZGl2IGNsYXNzPSJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiPjwhLS1hZnRlcmJlZ2luLS0+PHByZSB2LXByZSBjbGFzcz0ibGFuZ3VhZ2UtdGV4dCI+PGNvZGU+cGFja2FnZSBjb20ubXlnZHguZ2FtZS50Y3A7CgppbXBvcnQgY29tLmJhZGxvZ2ljLmdkeC5HZHg7CmltcG9ydCBjb20uYmFkbG9naWMuZ2R4Lk5ldDsKaW1wb3J0IGNvbS5iYWRsb2dpYy5nZHgubmV0LlNvY2tldDsKaW1wb3J0IGNvbS5iYWRsb2dpYy5nZHgubmV0LlNvY2tldEhpbnRzOwoKaW1wb3J0IGphdmEuaW8uT3V0cHV0U3RyZWFtOwoKcHVibGljIGNsYXNzIENsaWVudCBleHRlbmRzIFRocmVhZHsKICAgIEBPdmVycmlkZQogICAgcHVibGljIHZvaWQgcnVuKCkgewogICAgICAgIHJlY2VpdmVkVENQKCk7CiAgICB9CgogICAgcHVibGljICB2b2lkIHJlY2VpdmVkVENQKCkgewogICAgICAgIC8vIOWIm+W7uuWuouaIt+err+Wll+aOpeWtlwogICAgICAgIFNvY2tldCBzb2NrZXQgPSBHZHgubmV0Lm5ld0NsaWVudFNvY2tldChOZXQuUHJvdG9jb2wuVENQLCAmcXVvdDtsb2NhbGhvc3QmcXVvdDssIDgwODAsIG51bGwpOwoKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyDojrflj5bovpPlh7rmtYEKICAgICAgICAgICAgT3V0cHV0U3RyZWFtIG91dHB1dFN0cmVhbSA9IHNvY2tldC5nZXRPdXRwdXRTdHJlYW0oKTsKCiAgICAgICAgICAgIC8vIOWPkemAgeaVsOaNruWIsOacjeWKoeWZqAogICAgICAgICAgICBvdXRwdXRTdHJlYW0ud3JpdGUoJnF1b3Q7SGVsbG8sIHNlcnZlciEmcXVvdDsuZ2V0Qnl0ZXMoKSk7CiAgICAgICAgICAgIG91dHB1dFN0cmVhbS5mbHVzaCgpOwogICAgICAgICAgICAvLyDor7vlj5bmnI3liqHlmajlk43lupQKICAgICAgICAgICAgYnl0ZVtdIGRhdGEgPSBuZXcgYnl0ZVsxMDI0XTsKICAgICAgICAgICAgaW50IGxlbmd0aCA9IHNvY2tldC5nZXRJbnB1dFN0cmVhbSgpLnJlYWQoZGF0YSk7CiAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gbmV3IFN0cmluZyhkYXRhLCAwLCBsZW5ndGgpOwogICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oJnF1b3Q7UmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICZxdW90OyArIG1lc3NhZ2UpOwogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CiAgICAgICAgICAgIGUucHJpbnRTdGFja1RyYWNlKCk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgLy8g5YWz6Zet5a6i5oi356uv5aWX5o6l5a2XCiAgICAgICAgICAgIHNvY2tldC5kaXNwb3NlKCk7CiAgICAgICAgfQogICAgfQp9Cgo8L2NvZGU+PC9wcmU+CjwhLS1iZWZvcmVlbmQtLT48L2Rpdj48IS0tYWZ0ZXJlbmQtLT48aDIgaWQ9InRjcOmAmuS/oS3mnI3liqHnq68iPjxhIGNsYXNzPSJoZWFkZXItYW5jaG9yIiBocmVmPSIjdGNw6YCa5L+hLeacjeWKoeerryI+IzwvYT4gVENQ6YCa5L+h77yM5pyN5Yqh56uvPC9oMj4KPCEtLWJlZm9yZWJlZ2luLS0+PGRpdiBjbGFzcz0ibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIj48IS0tYWZ0ZXJiZWdpbi0tPjxwcmUgdi1wcmUgY2xhc3M9Imxhbmd1YWdlLXRleHQiPjxjb2RlPnBhY2thZ2UgY29tLm15Z2R4LmdhbWUudGNwOwoKaW1wb3J0IGNvbS5iYWRsb2dpYy5nZHguR2R4OwppbXBvcnQgY29tLmJhZGxvZ2ljLmdkeC5OZXQ7CmltcG9ydCBjb20uYmFkbG9naWMuZ2R4Lm5ldC5TZXJ2ZXJTb2NrZXQ7CmltcG9ydCBjb20uYmFkbG9naWMuZ2R4Lm5ldC5Tb2NrZXQ7CmltcG9ydCBjb20uYmFkbG9naWMuZ2R4Lm5ldC5Tb2NrZXRIaW50czsKCmltcG9ydCBqYXZhLmlvLk91dHB1dFN0cmVhbTsKCnB1YmxpYyBjbGFzcyBTZXJ2ZXIgZXh0ZW5kcyBUaHJlYWQgewogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgdm9pZCBydW4oKSB7CiAgICAgICAgb3BlblRjcCgpOwogICAgfQoKICAgIHB1YmxpYyAgdm9pZCBvcGVuVGNwKCkgewogICAgICAgIC8vIOWIm+W7uuacjeWKoeerr+Wll+aOpeWtlwogICAgICAgIFNlcnZlclNvY2tldCBzZXJ2ZXJTb2NrZXQgPSBHZHgubmV0Lm5ld1NlcnZlclNvY2tldChOZXQuUHJvdG9jb2wuVENQLCA4MDgwLCBudWxsKTsKCiAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgICAgLy8g562J5b6F5a6i5oi356uv6L+e5o6lCiAgICAgICAgICAgIFNvY2tldCBzb2NrZXQgPSBzZXJ2ZXJTb2NrZXQuYWNjZXB0KG51bGwpOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIC8vIOiOt+WPlui+k+WHuua1gQogICAgICAgICAgICAgICAgT3V0cHV0U3RyZWFtIG91dHB1dFN0cmVhbSA9IHNvY2tldC5nZXRPdXRwdXRTdHJlYW0oKTsKCiAgICAgICAgICAgICAgICAvLyDor7vlj5blrqLmiLfnq6/lj5HpgIHnmoTmlbDmja4KICAgICAgICAgICAgICAgIGJ5dGVbXSBkYXRhID0gbmV3IGJ5dGVbMTAyNF07CiAgICAgICAgICAgICAgICBpbnQgbGVuZ3RoID0gc29ja2V0LmdldElucHV0U3RyZWFtKCkucmVhZChkYXRhKTsKICAgICAgICAgICAgICAgIFN0cmluZyBtZXNzYWdlID0gbmV3IFN0cmluZyhkYXRhLCAwLCBsZW5ndGgpOwogICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCZxdW90O1JlY2VpdmVkIGZyb20gY2xpZW50OiAmcXVvdDsgKyBtZXNzYWdlKTsKCiAgICAgICAgICAgICAgICAvLyDlkJHlrqLmiLfnq6/lj5HpgIHlk43lupQKICAgICAgICAgICAgICAgIG91dHB1dFN0cmVhbS53cml0ZSgmcXVvdDtIZWxsbywgY2xpZW50ISZxdW90Oy5nZXRCeXRlcygpKTsKICAgICAgICAgICAgICAgIG91dHB1dFN0cmVhbS5mbHVzaCgpOwogICAgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkgewogICAgICAgICAgICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgIC8vIOWFs+mXreWuouaIt+err+Wll+aOpeWtlwogICAgICAgICAgICAgICAgc29ja2V0LmRpc3Bvc2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKPC9jb2RlPjwvcHJlPgo8IS0tYmVmb3JlZW5kLS0+PC9kaXY+PCEtLWFmdGVyZW5kLS0+PC9Db250ZW50U2xvdHNEaXN0cmlidXRvcj4K"},null]}