{"remainingRequest":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\docs\\libgdx\\tutorial8.md?vue&type=template&id=acf0eb34","dependencies":[{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\docs\\libgdx\\tutorial8.md","mtime":1708315106462},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\githubWork\\githubappearance\\JavaLearnNote\\JavaLearnNoteServe\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["render","_vm","_c","_self","attrs","$parent","slotKey","id","staticClass","href","_v","pre","class","staticRenderFns","_withStripped"],"sources":["D:/githubWork/githubappearance/JavaLearnNote/JavaLearnNoteServe/docs/libgdx/tutorial8.md"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"ContentSlotsDistributor\",\n    { attrs: { \"slot-key\": _vm.$parent.slotKey } },\n    [\n      _c(\"h2\", { attrs: { id: \"_8-1-路径查找\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#_8-1-路径查找\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 8.1 路径查找\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在libGDX中，可以使用AStar类进行路径查找。以下是一个简单的示例：\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              'import com.badlogic.gdx.math.Vector2;\\nimport com.badlogic.gdx.utils.Array;\\nimport com.badlogic.gdx.ai.pfa.DefaultConnection;\\nimport com.badlogic.gdx.ai.pfa.PathFinderAdapter;\\nimport com.badlogic.gdx.ai.pfa.indexed.IndexedAStarPathFinder;\\nimport com.badlogic.gdx.ai.pfa.indexed.IndexedAStarPathFinder.Path;\\nimport com.badlogic.gdx.maps.tiled.TiledMap;\\nimport com.badlogic.gdx.maps.tiled.TiledMapTileLayer;\\n\\npublic class PathfindingExample {\\n    public static void main(String[] args) {\\n        // 加载地图\\n        TiledMap map = new TmxMapLoader().load(\"pathfinding_map.tmx\");\\n        TiledMapTileLayer layer = (TiledMapTileLayer) map.getLayers().get(0);\\n\\n        // 创建路径查找器\\n        PathFinderAdapter<Vector2> pathFinderAdapter = new TiledMapAdapter(layer);\\n        IndexedAStarPathFinder<Vector2> pathFinder = new IndexedAStarPathFinder<>(pathFinderAdapter, false);\\n\\n        // 设置起点和终点\\n        Vector2 start = new Vector2(1, 1);\\n        Vector2 end = new Vector2(10, 10);\\n\\n        // 查找路径\\n        Path<Vector2> path = pathFinder.findPath(start, end);\\n        System.out.println(\"找到的路径：\" + path);\\n    }\\n}   \\n'\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"_8-2-ai行为树\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#_8-2-ai行为树\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 8.2 AI行为树\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在libGDX中，可以使用BehaviorTree类进行AI行为树的构建和执行。以下是一个简单的示例：\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"import com.badlogic.gdx.ai.btree.BehaviorTree;\\nimport com.badlogic.gdx.ai.btree.Decorator;\\nimport com.badlogic.gdx.ai.btree.Task;\\nimport com.badlogic.gdx.ai.btree.decorator.Invert;\\nimport com.badlogic.gdx.ai.btree.decorator.Succeeder;\\nimport com.badlogic.gdx.ai.btree.task.Condition;\\nimport com.badlogic.gdx.ai.btree.task.Selector;\\nimport com.badlogic.gdx.ai.btree.task.Sequence;\\n\\npublic class BehaviorTreeExample {\\n    public static void main(String[] args) {\\n        // 创建行为树节点\\n        Condition isHealthy = new IsHealthy();\\n        Condition isHungry = new IsHungry();\\n        Task eat = new Eat();\\n        Task drink = new Drink();\\n\\n        // 构建行为树\\n        Sequence sequence = new Sequence();\\n        sequence.addChild(isHealthy);\\n        sequence.addChild(isHungry);\\n\\n        Decorator invert = new Invert();\\n        invert.addChild(isHealthy);\\n\\n        Selector selector = new Selector();\\n        selector.addChild(sequence);\\n        selector.addChild(invert);\\n        selector.addChild(eat);\\n        selector.addChild(drink);\\n\\n        BehaviorTree<Void> behaviorTree = new BehaviorTree<>(selector);\\n\\n        // 执行行为树\\n        while (!behaviorTree.isFinished()) {\\n            behaviorTree.step();\\n        }\\n    }\\n}    \\n\"\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"h2\", { attrs: { id: \"_8-3-状态机-完整代码\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_8-3-状态机-完整代码\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 8.3 状态机，完整代码\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在libGDX中，可以使用StateMachine类进行状态机的构建和执行。以下是一个简单的示例：\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"import com.badlogic.gdx.ai.fsm.State;\\nimport com.badlogic.gdx.ai.fsm.StateMachine;\\nimport com.badlogic.gdx.ai.fsm.StateTransition;\\nimport com.badlogic.gdx.ai.fsm.Transition;\\n\\npublic class StateMachineExample {\\n    public static void main(String[] args) {\\n        // 创建状态\\n        State idleState = new IdleState();\\n        State walkState = new WalkState();\\n        State runState = new RunState();\\n\\n        // 创建状态转换条件\\n        Transition idleToWalk = new Transition() {\\n            @Override\\n            public boolean evaluate() {\\n                return playerIsWalking();\\n            }\\n        };\\n        Transition walkToRun = new Transition() {\\n            @Override\\n            public boolean evaluate() {\\n                return playerIsRunning();\\n            }\\n        };\\n        Transition runToIdle = new Transition() {\\n            @Override\\n            public boolean evaluate() {\\n                return playerIsIdle();\\n            }\\n        };\\n\\n        // 创建状态转换\\n        StateTransition idleToWalkTransition = new StateTransition(idleState, walkState, idleToWalk);\\n        StateTransition walkToRunTransition = new StateTransition(walkState, runState, walkToRun);\\n        StateTransition runToIdleTransition = new StateTransition(runState, idleState, runToIdle);\\n\\n        // 创建状态机并添加状态转换\\n        StateMachine stateMachine = new StateMachine();\\n        stateMachine.addTransition(idleToWalkTransition);\\n        stateMachine.addTransition(walkToRunTransition);\\n        stateMachine.addTransition(runToIdleTransition);\\n\\n        // 设置初始状态并执行状态机\\n        stateMachine.setInitialState(idleState);\\n        while (!stateMachine.isInState(idleState)) {\\n            stateMachine.update();\\n        }\\n    }\\n}\\n\\n\"\n            ),\n          ]),\n        ]),\n      ]),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":"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","ignoreList":[]}]}